

npm install --save-dev vite
npm install
npm run dev
In react, HTML code is written in JavaScript file(JSX)
The JavaScript files and not explicitly mentioned in the index.html(main html) but it gets added when loading the page automatically because the html is transformed and then loaded
React project uses a build process before it can be installed or used anywhere.
Raw and unprocessed react code wont execute in the browser.
The code will not be optimised/minified in production.
Node JS and used behind the scenes to make sure your React code gets transformed.

for import and export keywords to work in a JavaScript project you have to be using the module keyword in the index.html file. 
<script src="assets/scripts/App.js" type="module"></script>

in javascript you cannot have two default statements 

in react, we must have one component/one javascript function per file. and this one component function is exported using the statement :
	export default ComponentName;
	
"let" can be reassigned but "const" cannot be reassigned in JS

Operators:
console.log(10 / 5);--2
console.log("hello" + " world");--hello world
console.log(10 === 1);--false
console.log(10 >= 12);--false

Arrow functions are used when functions dont need a name(anonymous function) : 

() => {

}
anonymous functions can also be declared as below:
export default function(){
console.log("Hello");
}
When working with Arrow Functions, you have a couple of "syntax shortcuts" available.

Most importantly, you should know about the following alternatives:

1) Omitting parameter list parentheses

If your arrow functions takes exactly one parameter, you may omit the wrapping parentheses.

Instead of

(userName) => { ... }
you could write

userName => { ... }
Please note: 

If your function takes no parameters, parentheses must not be omitted - () => { ... } is the only correct form in that case.

If your function takes more than one parameter, you also must not omit parentheses - 
userName, userAge => { ... } would be invalid ((userName, userAge) => { ... } is correct)!

2) Omitting function body curly braces

If your arrow function contains no other logic but a return statement, you may omit the curly braces and the return keyword.

Instead of

number => { 
  return number * 3;
}
you could write

number => number * 3;
The following code would be invalid:

number => return number * 3; // invalid because return keyword must also be omitted!
number => if (number === 2) { return 5 }; // invalid because if statements can't be returned
3) Special case: Just returning an object

If you go for the shorter alternative explained in 2) and you're trying to return a JavaScript object, you may end up with the following, 
invalid code:

number => { age: number }; // trying to return an object
This code would be invalid because JavaScript treats the curly braces as function body wrappers (not as code that creates a JS object).

To "tell" JavaScript that an object should be created (and returned) instead, the code would need to be adjusted like this:

number => ({ age: number }); // wrapping the object in extra parentheses
By wrapping the object and its curly braces with an extra pair of parentheses, JavaScript understands that the curly braces are not there to define a
 function body but instead to create an object. Hence that object then gets returned.

Objects can also have methods in javascript


Destructuring in Function Parameter Lists
The destructuring syntax explained in the previous lecture can also be used in function parameter lists.

For example, if a function accepts a parameter that will contain an object it can be destructured to "pull out" the object properties and make them available as locally scoped variables (i.e., variables only available inside the function body).

Here's an example:

function storeOrder(order) {
  localStorage.setItem('id', order.id);
  localStorage.setItem('currency', order.currency);
}
Instead of accessing the order properties via the "dot notation" inside the storeOrder function body, you could use destructuring like this:

function storeOrder({id, currency}) { // destructuring
  localStorage.setItem('id', id);
  localStorage.setItem('currency', currency);
}

The destructuring syntax is the same as taught in the previous lecture - just without creating a constant or variable manually.

Instead, id and currency are "pulled out" of the incoming object (i.e., the object passed as an argument to storeOrder).

It's very important to understand, that storeOrder still only takes one parameter in this example! It does not accept two parameters. Instead, it's one single parameter - an object which then just is destructured internally.

The function would still be called like this:

storeOrder({id: 5, currency: 'USD', amount: 15.99}); // one argument / value!

dynamic values is mentioned in included in in src={} ->like this. we should not add quotes.
we have the ability to import image file into javascript file in reactJS through import statements which is not allowed in traditional javascript.
when we do this import, this file will be automatically included in build process and we will not loose this file.

Props:- react uses props to pass data into components and use that data in the component.
props are used to confifure components. react merges all the props into a single objects having key value pairs and that is passed to the component.
you can include styling using the statement <section id="css class name"></section>

function CoreConcepts({image, title, description}){
return();
}
the above is called as object destructuring that will destructure the object based on the parameters

"children" props contains any content you have between your component text

value for an onClick event prop or any other event/eventHandler prop is a function : onClick={functionName} -- here the function must not be executed, i.e we must not add a () parentheses

Important : react will only execute the Component funcition once when it is first encountered somewhere in your code.

React concept called state is a way of telling the UI that it should be updated.

we need to import the useState function to update UI is react. this is called React-hook - import {useState} from 'react';
all the functions that start with 'use' in react projects are called hooks.

1. Hooks can be called only inside a component function and not in any other functions/custom Hooks.
2. hooks must be called only on the top levels. it must not be called in any nested code statements.

State updates lead to new state value: current state value provided by react and the state updating function

we can output array for data dynamically in reactjs. eg: {['hello','world']}
we can also output an array for renderable data. eg {[<p>hello</p>, <p>world</p>]}

createElement in react can be used to replace jsx with just the javascript code. 
it contains component type(identifies the to-be-rendered component eg:div) , props object(sets component props), child content (the content passed between
the component tags)
the above method also works without build process.

When you use prop(attribute) on your component, that does not get transferred to your component.

...props ->the three dots tells javascript to collect all the props and make it inside the props object.

The public/ Folder:
As shown in the previous lecture you can store images in the public/ folder and then directly reference them from inside your index.html or index.css files.

The reason for that is that images (or, in general: files) stored in public/ are made publicly available by the underlying project development server & build process. Just like index.html, those files can directly be visited from inside the browser and can therefore also be requested by other files.

If you try loading localhost:5173/some-image.jpg, you'll be able to see that image (if it exists in the public/ folder, of course).

The src/assets/ Folder
You can also store images in the src/assets/ folder (or, actually, anywhere in the src folder).

So what's the difference compared to public/?

Any files (of any format) stored in src (or subfolders like src/assets/) are not made available to the public. They can't be accessed by website visitors. If you try loading localhost:5173/src/assets/some-image.jpg, you'll get an error.

Instead, files stored in src/ (and subfolders) can be used in your code files. Images imported into code files are then picked up by the underlying build process, potentially optimized, and kind of "injected" into the public/ folder right before serving the website. Links to those images are automatically generated and used in the places where you referenced the imported images.

Which Folder Should You Use?
You should use the public/ folder for any images that should not be handled by the build process and that should be generally available. Good candidates are images used directly in the index.html file or favicons.

On the other hand, images that are used inside of components should typically be stored in the src/ folder (e.g., in src/assets/).


whenever we are reusing components in the html markup in react, react will create two insolated inputs of the compoennts. hence there wont be any 
overriding of functionalities.

in react if your new state is dependent on your previous state, then you must pass a function to your state updating function
in the below example, setIsEditing function will change based on whether isEditing is true or false
for example: we must declare like this:
              function handleEditClick() {
    setIsEditing((editing) => !isEditing);
}

not like this:

function handleEditClick() {
    setIsEditing(!isEditing);
}